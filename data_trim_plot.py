#!/usr/bin/python3
# -*- coding:utf-8 -*-

version = 1.0	# 2023/4/14

import argparse
import numpy as np
import pandas as pd
import csv
import sys
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
import subprocess

parser = argparse.ArgumentParser(description='Plot 2D map for binary sequence')
parser.add_argument(
	'-d', '--data',
	type = str,
	dest = 'dataset',
    required = False
)
parser.add_argument(
    '-l', '--label',
    type = str,
    dest = 'label_file',
    required = False, 
    help = 'data label'
)
parser.add_argument(
    '-m', '--binseqmap',
    type = str,
    dest = 'mapping_file',
    required = False, 
    help = 'Mapping file generated by binary_seq.py'
)
parser.add_argument(
    '--exclude_row',
    type = str,
    dest = 'exclude_orfs',
    default = '', 
    help = 'list of ORFs excluding from data'
)
parser.add_argument(
    '--include_row',
    type = str,
    dest = 'include_orfs',
    default = '', 
    help = 'list of ORFs including from data'
)
parser.add_argument(
    '--exclude_idx',
    type = str,
    dest = 'exclude_index',
    default = '', 
    help = 'list of ORFs excluding from data'
)
parser.add_argument(
    '--include_idx',
    type = str,
    dest = 'include_index',
    default = '', 
    help = 'list of ORFs including from data'
)
parser.add_argument(
	'--datalabel',
	dest = 'datalabel',
	action="store_true",
	default = False
)
parser.add_argument(
    '-o', '--out',
    type = str,
    dest = 'out_file',
    help = 'prefix of output file'
)
parser.add_argument(
    '--max',
    type = float,
    dest = 'max_freq',
    help = 'maximum frequency of orf',
    default = 0.95
)
parser.add_argument(
    '--min',
    type = float,
    dest = 'min_freq',
    help = 'minimum frequency of orf',
    default = 0.05
)

args = parser.parse_args()

data_file = args.dataset
mapping_file = args.mapping_file
label_file = args.label_file
exclude_orfs = args.exclude_orfs
include_orfs = args.include_orfs
exclude_idx = args.exclude_index
include_idx = args.include_index
datalabel = args.datalabel
out_file = args.out_file
maxval = args.max_freq
minval = args.min_freq

##### Load files #####
if data_file:
	df_data = pd.read_csv(data_file, index_col=0)
elif mapping_file:
	df_mapping = pd.read_csv(mapping_file, sep='\t', index_col=0).drop(['sum','chromosome'], axis=1)
	df_data = df_mapping.T
else:
	print('--data (-d) or --binseqmap (-m) is required')
	sys.exit()
input_size = df_data.shape

if include_orfs != '':
	with open(include_orfs, 'r') as f:
		include_list = f.read().rstrip().split("\n")
	df_data = df_data.loc[:,include_list]
elif exclude_orfs != '':
	with open(exclude_orfs, 'r') as f:
		exclude_list = f.read().rstrip().split("\n")
	df_data=df_data.drop(exclude_list, axis=1)
if include_idx != '':
	with open(include_idx, 'r') as f:
		include_list = f.read().rstrip().split("\n")
	df_data = df_data.loc[include_list,:]
elif exclude_idx != '':
	with open(exclude_idx, 'r') as f:
		exclude_list = f.read().rstrip().split("\n")
	df_data=df_data.drop(exclude_list, axis=0)

##### Data trimming #####
f_lower = df_data.shape[0] * minval
f_upper = df_data.shape[0] * maxval
sr_sum = df_data.sum(axis=0, numeric_only=True)
drop_list = []
for index, value in sr_sum.items():
	if value < f_lower or value > f_upper:
		drop_list.append(index)
		#print(index, value)
df_data = df_data.drop(columns=drop_list)


dataindex_list = df_data.index.tolist()
print(df_data)

model = PCA(n_components=4)
model.fit(df_data)
data_pca = model.transform(df_data)
ratio1 = round(model.explained_variance_ratio_[0], 5)
ratio2 = round(model.explained_variance_ratio_[1], 5)
ratio3 = round(model.explained_variance_ratio_[2], 5)
ratio4 = round(model.explained_variance_ratio_[3], 5)
print(ratio1, ratio2, ratio3, ratio4)


fig, ax = plt.subplots()
if out_file:
	title = out_file
else:
	title = 'ml_dataplot.py'
ax.set_title(title)
ax.set_xlabel('PC1 : ' + str(ratio1))
ax.set_ylabel('PC2 : ' + str(ratio2))

if label_file:
	df_label = pd.read_csv(label_file, index_col=0)
	print(df_label)
	label_max = df_label['label'].max()
	#print(label_max)

	for i, row in enumerate(data_pca):
		index_name = dataindex_list[i]
		if df_label.at[index_name, 'label'] == 0:
			color_name = 'blue'
		else:
			color_name = 'red'
		ax.scatter(row[0], row[1], marker = '.', color=color_name, s=1)
		if datalabel:
			ax.text(row[0], row[1], index_name, fontsize=5) 

else:
	for i, row in enumerate(data_pca):
		index = dataindex_list[i]
		ax.scatter(row[0], row[1], marker = '.', color='blue') 
		if datalabel:
			ax.text(row[0], row[1], index, fontsize=5) 

if out_file:
	plt.savefig(out_file + '.eps')
	df_data.to_csv(out_file + '.csv')
	df_2d = pd.DataFrame(data_pca, index=dataindex_list)
	df_2d.to_csv(out_file + '_PCA.csv')
	with open(out_file + '_info.txt', 'w') as f:
		#f.write('ml_dataplot.py ver.' + str(version) + '\n')
		f.write('data: ' + str(data_file) + '\n')
		f.write('binseqmap: ' + str(mapping_file) + '\n')
		f.write('label: ' + str(label_file) + '\n')
		f.write('exclude_row: ' + str(exclude_orfs) + '\n')
		f.write('include_row: ' + str(include_orfs) + '\n')
		f.write('exclude_idx: ' + str(exclude_idx) + '\n')
		f.write('include_idx: ' + str(include_idx) + '\n')
		f.write('max: ' + str(maxval) + '\n')
		f.write('min: ' + str(minval) + '\n')
		f.write('input size: ' + str(input_size) + '\n')
		f.write('data size: ' + str(df_data.shape) + '\n')
		f.write('Variance ratio : ' + str(ratio1) + ', ' + str(ratio2) + ', ' + str(ratio3) + ', ' + str(ratio4))
	subprocess.Popen(['evince', out_file + '.eps'])
else:
	plt.show()


